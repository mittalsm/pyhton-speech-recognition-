"""
Synchronizing Threads:

The threading module provided with Python includes a simple-to-implement locking mechanism that will allow
you to synchronize threads. A new lock is created by calling the Lock() method, which returns the new lock.

A. The acquire(blocking) method of the new lock object would be used to force threads to run synchronously.  
   The optional blocking parameter enables you to control whether the thread will wait to acquire the lock.

->If blocking is set to 0, the thread will return immediately with a 0 value if the lock cannot be acquired
  and with a 1 if the lock was acquired.
->If blocking is set to 1, the thread will block and wait for the lock to be released.

B. The release() method of the the new lock object would be used to release the lock when it is no longer
   required.

"""


#!/usr/bin/python

import threading
import time

class myThread (threading.Thread):
                                   def __init__(self, threadID, name, counter):
                                                                                threading.Thread.__init__(self)
                                                                                self.threadID = threadID
                                                                                self.name = name
                                                                                self.counter = counter
                                   def run(self):
                                                   print "Starting " + self.name

                                                   # Get lock to synchronize threads
                                                   threadLock.acquire()
                                                   print_time(self.name, self.counter, 3)

                                                   # Free lock to release next thread
                                                   threadLock.release()

def print_time(threadName, delay, counter):
                                            while counter:
                                                            time.sleep(delay)
                                                            print "%s: %s" % (threadName, time.ctime(time.time()))
                                                            counter -= 1

threadLock = threading.Lock()
threads = []

# Create new threads
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# Start new Threads
thread1.start()
thread2.start()

# Add threads to thread list
threads.append(thread1)
threads.append(thread2)

# Wait for all threads to complete
for t in threads:
                  t.join()
print "Exiting Main Thread"
