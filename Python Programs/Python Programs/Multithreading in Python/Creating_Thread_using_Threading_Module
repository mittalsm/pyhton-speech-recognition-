"""The Threading Module:
    
The newer threading module included with Python 2.4 provides much more powerful, high-level support
for threads than the thread module discussed in the previous section.

The threading module exposes all the methods of the thread module and provides some additional methods:

1. threading.activeCount(): Returns the number of thread objects that are active.
2. threading.currentThread(): Returns the number of thread objects in the caller's thread control.
3. threading.enumerate(): Returns a list of all thread objects that are currently active.

In addition to the methods, the threading module has the Thread class that implements threading.
The methods provided by the Thread class are as follows:

1. run(): The run() method is the entry point for a thread.
2. start(): The start() method starts a thread by calling the run method.
3. join([time]): The join() waits for threads to terminate.
4. isAlive(): The isAlive() method checks whether a thread is still executing.
5. getName(): The getName() method returns the name of a thread.
6.setName(): The setName() method sets the name of a thread.


Creating Thread using Threading Module:
    
To implement a new thread using the threading module, you have to do the following:

step-1: Define a new subclass of the Thread class.
step-2: Override the __init__(self [,args]) method to add additional arguments.
step-3: Then, override the run(self [,args]) method to implement what the thread should
        do when started.

"""

#!/usr/bin/python

import threading
import time

exitFlag = 0

class myThread(threading.Thread):
                                  def __init__(self, threadID, name, counter):
                                                                                 threading.Thread.__init__(self)
                                                                                 self.threadID = threadID
                                                                                 self.name = name
                                                                                 self.counter = counter
                                  def run(self):
                                                  print "Starting ",self.name
                                                  print_time(self.name, self.counter, 5)
                                                  print "Exiting ",self.name

def print_time(threadName, delay, counter):
                                                                              while counter:
                                                                                             if exitFlag:
                                                                                                          thread.exit()
                                                                                             time.sleep(delay)
                                                                                             print "%s: %s" % (threadName, time.ctime(time.time()))
                                                                                             counter -= 1

# Create new threads
thread1 = myThread(1, "Thread-1", 1)
thread2 = myThread(2, "Thread-2", 2)

# Start new Threads
thread1.start()
thread2.start()

print "Exiting Main Thread"
