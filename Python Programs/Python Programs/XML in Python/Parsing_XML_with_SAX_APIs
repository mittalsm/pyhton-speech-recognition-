"""
SAX is a standard interface for event-driven XML parsing. Parsing XML with SAX generally requires you to
create your own ContentHandler by subclassing xml.sax.ContentHandler.

->Your ContentHandler handles the particular tags and attributes of your flavor(s) of XML.
  A ContentHandler object provides methods to handle various parsing events.
  Its owning parser calls ContentHandler methods as it parses the XML file.
-?The methods startDocument and endDocument are called at the start and the end of the XML
  file.
->The method characters(text) is passed character data of the XML file via the parameter
  text.

The ContentHandler is called at the start and end of each element. If the parser is not in namespace mode,
the methods startElement(tag, attributes) and endElement(tag) are called; otherwise, the corresponding
methods startElementNS and endElementNS are called. Here, tag is the element tag, and attributes is an
Attributes object.


Here are other important methods to understand before proceeding:

A. The make_parser Method:

   Following method creates a new parser object and returns it. The parser object created will be of the
   first parser type the system finds.

                                 xml.sax.make_parser( [parser_list] )

   Here is the detail of the parameters:

   1.	parser_list: The optional argument consisting of a list of parsers to use which must all implement
                     the make_parser method.

B. The parse Method:

   Following method creates a SAX parser and uses it to parse a document.

                                 xml.sax.parse( xmlfile, contenthandler[, errorhandler])

   Here is the detail of the parameters:

   1.	xmlfile: This is the name of the XML file to read from.
   2.	contenthandler: This must be a ContentHandler object.
   3.	errorhandler: If specified, errorhandler must be a SAX ErrorHandler object.

C. The parseString Method:

   There is one more method to create a SAX parser and to parse the specified XML string.

                                 xml.sax.parseString(xmlstring, contenthandler[, errorhandler])

   Here is the detail of the parameters:
   1. xmlstring: This is the name of the XML string to read from.
   2. contenthandler: This must be a ContentHandler object.
   3. errorhandler: If specified, errorhandler must be a SAX ErrorHandler object.

"""


import xml.sax         #importing the package

class MovieHandler( xml.sax.ContentHandler ):
   def __init__(self):
      self.CurrentData = ""
      self.type = ""
      self.format = ""
      self.year = ""
      self.rating = ""
      self.stars = ""
      self.description = ""

   # Call when an element starts
   def startElement(self, tag, attributes):
      self.CurrentData = tag
      if tag == "movie":
         print "*****Movie*****"
         title = attributes["title"]
         print "Title:", title

   # Call when an elements ends
   def endElement(self, tag):
      if self.CurrentData == "type":
         print "Type:", self.type
      elif self.CurrentData == "format":
         print "Format:", self.format
      elif self.CurrentData == "year":
         print "Year:", self.year
      elif self.CurrentData == "rating":
         print "Rating:", self.rating
      elif self.CurrentData == "stars":
         print "Stars:", self.stars
      elif self.CurrentData == "description":
         print "Description:", self.description
         print "\n"
      self.CurrentData = ""

   # Call when a character is read
   def characters(self, content):
      if self.CurrentData == "type":
         self.type = content
      elif self.CurrentData == "format":
         self.format = content
      elif self.CurrentData == "year":
         self.year = content
      elif self.CurrentData == "rating":
         self.rating = content
      elif self.CurrentData == "stars":
         self.stars = content
      elif self.CurrentData == "description":
         self.description = content
  
if ( __name__ == "__main__"):
   
   # create an XMLReader
   parser = xml.sax.make_parser()
   # turn off namepsaces
   parser.setFeature(xml.sax.handler.feature_namespaces, 0)

   # override the default ContextHandler
   Handler = MovieHandler()
   parser.setContentHandler( Handler )

   # loading an xml file into the python application    
   parser.parse("movies.xml")
