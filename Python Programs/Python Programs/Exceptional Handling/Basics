"""When we plan our code/program, we always work for situations that are normally
expected, and our program works very well in those situations. But, we all
understand that programs have to deal with errors. Here errors are not syntax
errors instead they are the unexpected condition(s) that are not part of normal
operations planned during coding. Partial list of such kinds of errors are:
->Out of Memory
->Invalid filename
->Attempting to write into read only file
->Getting an incorrect input from user
->Division by zero
->Accessing an out of bound list element
->Trying to read beyond end of file
->Sending illegal arguments to a method

If any of such situations is encountered, a good program will either have the
code check for them and perform some suitable action to remedy them, or at
least stop processing in a well defined way after giving appropriate message(s).
So what we are saying is if an error happened, there must be code written in
program, to recover from the error. In case if it is not possible to handle the
error then it must be reported in user friendly way to the user.

Exceptions are logical/run time errors that are not caught by the system easily
as compared to the syntax error. And the code written to handle it is known as
exception handler.
For handling exceptional situations, python provides
1. raise statement to raise exception in program
2. try..... except statement for catching and handling the errors.

Raise statement allows the programmer to force a specified exception to occur.
Once an exception is raised, it's up to caller function to either handle it
using try/except statement or let it propagate further.

S.No.            Error type                         Description
1.                 IOError                 is raised when I/O operator fails. Eg. File not found, disk full
2.                 EOFError                is raised when, one of the file method i.e. read(), readline() or
                                           readlines(), try to read beyond the file.
3.            ZeroDivisionError            is raised when, in division operation, denominator is zero
4.                ImportError              is raised when import statement fails to find the module definition or
                                           file name
5.                IndexError               is raised when in a sequence - index/subscript is out of range.
6.                NameError                is raised when a local or global name is not found
7.             IndentationError            is raised for incorrect indentation
8.                TypeError                is raised when we try to perform an operation on incorrect type of
                                           value.
9.               ValueError                is raised when a built in function/method receives an argument of
                                           correct type but with inappropriate value.


Syntax:

        try:
                 statements which might go wrong

        except error type1:
                            statements to be executed, if error type1 happens
       [except error type2:
                            statements to be executed, if error type 2 happens
        .
        .
        .
        else:
                   statements to be executed, if no exception occurs
        finally:
                   statements to be executed]
                   remember error type can be user defined also.

Note that the else clause written after all except statements, is executed, if code in try block does not raise any
exception.
finally clause is always executed before leaving the try statement irrespective of occurrence of exception. It
is also executed if during execution of try and except statement any of the clause is left via break, continue
or return statement.



USe of raise:   """

